stages:
  - validate
  - test
  - security
  - build
  - deploy-dev
  - deploy-staging
  - deploy-prod

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  DOCKER_REGISTRY: "registry.gitlab.com/yourcompany/jpos-payment"
  KUBERNETES_NAMESPACE: "jpos-payment"

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

# =============================================================================
# Validation Stage
# =============================================================================

validate:code:
  stage: validate
  image: eclipse-temurin:23-jdk-alpine
  script:
    - ./gradlew checkstyleMain checkstyleTest
    - ./gradlew spotbugsMain
  artifacts:
    reports:
      junit: build/reports/tests/**/TEST-*.xml
    paths:
      - build/reports/
  only:
    - merge_requests
    - develop
    - master

validate:dependencies:
  stage: validate
  image: eclipse-temurin:23-jdk-alpine
  script:
    - ./gradlew dependencyCheckAnalyze
  artifacts:
    reports:
      junit: build/reports/tests/**/TEST-*.xml
    paths:
      - build/reports/
  only:
    - merge_requests
    - develop
    - master

# =============================================================================
# Testing Stage
# =============================================================================

test:unit:
  stage: test
  image: eclipse-temurin:23-jdk-alpine
  script:
    - ./gradlew test
  artifacts:
    reports:
      junit: build/test-results/test/**/TEST-*.xml
      coverage_report:
        coverage_format: cobertura
        path: build/reports/jacoco/test/cobertura.xml
    paths:
      - build/reports/
  coverage: '/Total.*?([0-9]{1,3})%/'

test:integration:
  stage: test
  image: eclipse-temurin:23-jdk-alpine
  services:
    - postgres:15-alpine
    - redis:7-alpine
  variables:
    POSTGRES_DB: jpos_test
    POSTGRES_USER: jpos
    POSTGRES_PASSWORD: jpos123
    DB_URL: jdbc:postgresql://postgres:5432/jpos_test
    REDIS_HOST: redis
  script:
    - ./gradlew integrationTest
  artifacts:
    reports:
      junit: build/test-results/integrationTest/**/TEST-*.xml
    paths:
      - build/reports/

test:performance:
  stage: test
  image: eclipse-temurin:23-jdk-alpine
  services:
    - postgres:15-alpine
    - redis:7-alpine
  variables:
    POSTGRES_DB: jpos_perf
    POSTGRES_USER: jpos
    POSTGRES_PASSWORD: jpos123
  script:
    - ./gradlew performanceTest
  artifacts:
    paths:
      - build/reports/jmeter/
  only:
    - develop
    - master

# =============================================================================
# Security Stage
# =============================================================================

security:sast:
  stage: security
  image: 
    name: securecodewarrior/gitlab-sast:latest
  script:
    - /analyzer run
  artifacts:
    reports:
      sast: gl-sast-report.json
  only:
    - merge_requests
    - develop
    - master

security:dependency:
  stage: security
  image: owasp/dependency-check:latest
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh
        --project "jPOS Payment Processor"
        --scan ./
        --format XML
        --format JSON
        --format HTML
        --out build/reports/
  artifacts:
    paths:
      - build/reports/
  only:
    - merge_requests
    - develop
    - master

security:container:
  stage: security
  image: aquasec/trivy:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_PROJECT_NAME:$CI_COMMIT_SHA .
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $CI_PROJECT_NAME:$CI_COMMIT_SHA
  only:
    - develop
    - master

# =============================================================================
# Build Stage
# =============================================================================

build:jar:
  stage: build
  image: eclipse-temurin:23-jdk-alpine
  script:
    - ./gradlew clean build -x test
  artifacts:
    paths:
      - build/libs/
    expire_in: 1 hour

build:docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_REGISTRY:$CI_COMMIT_SHA .
    - docker build -t $DOCKER_REGISTRY:latest .
    - docker push $DOCKER_REGISTRY:$CI_COMMIT_SHA
    - docker push $DOCKER_REGISTRY:latest
  only:
    - develop
    - master

# =============================================================================
# Deployment Stages
# =============================================================================

deploy:dev:
  stage: deploy-dev
  image: bitnami/kubectl:latest
  environment:
    name: development
    url: https://jpos-dev.yourdomain.com
  script:
    - kubectl config use-context development
    - envsubst < k8s/deployment.yaml | kubectl apply -f -
    - kubectl rollout status deployment/jpos-payment-app -n jpos-payment-dev
  variables:
    ENVIRONMENT: dev
    REPLICAS: 1
    RESOURCES_MEMORY_REQUEST: 512Mi
    RESOURCES_MEMORY_LIMIT: 1Gi
  only:
    - develop

deploy:staging:
  stage: deploy-staging
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://jpos-staging.yourdomain.com
  script:
    - kubectl config use-context staging
    - envsubst < k8s/deployment.yaml | kubectl apply -f -
    - kubectl rollout status deployment/jpos-payment-app -n jpos-payment-staging
    - ./scripts/smoke-test.sh $STAGING_URL
  variables:
    ENVIRONMENT: staging
    REPLICAS: 2
    RESOURCES_MEMORY_REQUEST: 1Gi
    RESOURCES_MEMORY_LIMIT: 2Gi
  only:
    - master

deploy:prod:
  stage: deploy-prod
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://jpos.yourdomain.com
  script:
    - kubectl config use-context production
    - envsubst < k8s/deployment.yaml | kubectl apply -f -
    - kubectl rollout status deployment/jpos-payment-app -n jpos-payment-prod
    - ./scripts/smoke-test.sh $PRODUCTION_URL
  variables:
    ENVIRONMENT: prod
    REPLICAS: 5
    RESOURCES_MEMORY_REQUEST: 2Gi
    RESOURCES_MEMORY_LIMIT: 4Gi
  when: manual
  only:
    - master